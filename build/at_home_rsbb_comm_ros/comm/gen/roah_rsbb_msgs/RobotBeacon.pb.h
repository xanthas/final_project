// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotBeacon.proto

#ifndef PROTOBUF_RobotBeacon_2eproto__INCLUDED
#define PROTOBUF_RobotBeacon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Time.pb.h"
// @@protoc_insertion_point(includes)

namespace roah_rsbb_msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_RobotBeacon_2eproto();
void protobuf_AssignDesc_RobotBeacon_2eproto();
void protobuf_ShutdownFile_RobotBeacon_2eproto();

class RobotBeacon;

enum RobotBeacon_CompType {
  RobotBeacon_CompType_COMP_ID = 6666,
  RobotBeacon_CompType_MSG_TYPE = 30
};
bool RobotBeacon_CompType_IsValid(int value);
const RobotBeacon_CompType RobotBeacon_CompType_CompType_MIN = RobotBeacon_CompType_MSG_TYPE;
const RobotBeacon_CompType RobotBeacon_CompType_CompType_MAX = RobotBeacon_CompType_COMP_ID;
const int RobotBeacon_CompType_CompType_ARRAYSIZE = RobotBeacon_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RobotBeacon_CompType_descriptor();
inline const ::std::string& RobotBeacon_CompType_Name(RobotBeacon_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RobotBeacon_CompType_descriptor(), value);
}
inline bool RobotBeacon_CompType_Parse(
    const ::std::string& name, RobotBeacon_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RobotBeacon_CompType>(
    RobotBeacon_CompType_descriptor(), name, value);
}
// ===================================================================

class RobotBeacon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roah_rsbb_msgs.RobotBeacon) */ {
 public:
  RobotBeacon();
  virtual ~RobotBeacon();

  RobotBeacon(const RobotBeacon& from);

  inline RobotBeacon& operator=(const RobotBeacon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotBeacon& default_instance();

  void Swap(RobotBeacon* other);

  // implements Message ----------------------------------------------

  inline RobotBeacon* New() const { return New(NULL); }

  RobotBeacon* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RobotBeacon& from);
  void MergeFrom(const RobotBeacon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RobotBeacon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RobotBeacon_CompType CompType;
  static const CompType COMP_ID =
    RobotBeacon_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    RobotBeacon_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return RobotBeacon_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    RobotBeacon_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    RobotBeacon_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    RobotBeacon_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return RobotBeacon_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return RobotBeacon_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return RobotBeacon_CompType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string team_name = 1;
  bool has_team_name() const;
  void clear_team_name();
  static const int kTeamNameFieldNumber = 1;
  const ::std::string& team_name() const;
  void set_team_name(const ::std::string& value);
  void set_team_name(const char* value);
  void set_team_name(const char* value, size_t size);
  ::std::string* mutable_team_name();
  ::std::string* release_team_name();
  void set_allocated_team_name(::std::string* team_name);

  // required string robot_name = 2;
  bool has_robot_name() const;
  void clear_robot_name();
  static const int kRobotNameFieldNumber = 2;
  const ::std::string& robot_name() const;
  void set_robot_name(const ::std::string& value);
  void set_robot_name(const char* value);
  void set_robot_name(const char* value, size_t size);
  ::std::string* mutable_robot_name();
  ::std::string* release_robot_name();
  void set_allocated_robot_name(::std::string* robot_name);

  // required .roah_rsbb_msgs.Time time = 3;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  const ::roah_rsbb_msgs::Time& time() const;
  ::roah_rsbb_msgs::Time* mutable_time();
  ::roah_rsbb_msgs::Time* release_time();
  void set_allocated_time(::roah_rsbb_msgs::Time* time);

  // @@protoc_insertion_point(class_scope:roah_rsbb_msgs.RobotBeacon)
 private:
  inline void set_has_team_name();
  inline void clear_has_team_name();
  inline void set_has_robot_name();
  inline void clear_has_robot_name();
  inline void set_has_time();
  inline void clear_has_time();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr team_name_;
  ::google::protobuf::internal::ArenaStringPtr robot_name_;
  ::roah_rsbb_msgs::Time* time_;
  friend void  protobuf_AddDesc_RobotBeacon_2eproto();
  friend void protobuf_AssignDesc_RobotBeacon_2eproto();
  friend void protobuf_ShutdownFile_RobotBeacon_2eproto();

  void InitAsDefaultInstance();
  static RobotBeacon* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RobotBeacon

// required string team_name = 1;
inline bool RobotBeacon::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotBeacon::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotBeacon::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotBeacon::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
inline const ::std::string& RobotBeacon::team_name() const {
  // @@protoc_insertion_point(field_get:roah_rsbb_msgs.RobotBeacon.team_name)
  return team_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RobotBeacon::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roah_rsbb_msgs.RobotBeacon.team_name)
}
inline void RobotBeacon::set_team_name(const char* value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roah_rsbb_msgs.RobotBeacon.team_name)
}
inline void RobotBeacon::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roah_rsbb_msgs.RobotBeacon.team_name)
}
inline ::std::string* RobotBeacon::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:roah_rsbb_msgs.RobotBeacon.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RobotBeacon::release_team_name() {
  // @@protoc_insertion_point(field_release:roah_rsbb_msgs.RobotBeacon.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RobotBeacon::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:roah_rsbb_msgs.RobotBeacon.team_name)
}

// required string robot_name = 2;
inline bool RobotBeacon::has_robot_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotBeacon::set_has_robot_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotBeacon::clear_has_robot_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotBeacon::clear_robot_name() {
  robot_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robot_name();
}
inline const ::std::string& RobotBeacon::robot_name() const {
  // @@protoc_insertion_point(field_get:roah_rsbb_msgs.RobotBeacon.robot_name)
  return robot_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RobotBeacon::set_robot_name(const ::std::string& value) {
  set_has_robot_name();
  robot_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roah_rsbb_msgs.RobotBeacon.robot_name)
}
inline void RobotBeacon::set_robot_name(const char* value) {
  set_has_robot_name();
  robot_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roah_rsbb_msgs.RobotBeacon.robot_name)
}
inline void RobotBeacon::set_robot_name(const char* value, size_t size) {
  set_has_robot_name();
  robot_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roah_rsbb_msgs.RobotBeacon.robot_name)
}
inline ::std::string* RobotBeacon::mutable_robot_name() {
  set_has_robot_name();
  // @@protoc_insertion_point(field_mutable:roah_rsbb_msgs.RobotBeacon.robot_name)
  return robot_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RobotBeacon::release_robot_name() {
  // @@protoc_insertion_point(field_release:roah_rsbb_msgs.RobotBeacon.robot_name)
  clear_has_robot_name();
  return robot_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RobotBeacon::set_allocated_robot_name(::std::string* robot_name) {
  if (robot_name != NULL) {
    set_has_robot_name();
  } else {
    clear_has_robot_name();
  }
  robot_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_name);
  // @@protoc_insertion_point(field_set_allocated:roah_rsbb_msgs.RobotBeacon.robot_name)
}

// required .roah_rsbb_msgs.Time time = 3;
inline bool RobotBeacon::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotBeacon::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotBeacon::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotBeacon::clear_time() {
  if (time_ != NULL) time_->::roah_rsbb_msgs::Time::Clear();
  clear_has_time();
}
inline const ::roah_rsbb_msgs::Time& RobotBeacon::time() const {
  // @@protoc_insertion_point(field_get:roah_rsbb_msgs.RobotBeacon.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::roah_rsbb_msgs::Time* RobotBeacon::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::roah_rsbb_msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:roah_rsbb_msgs.RobotBeacon.time)
  return time_;
}
inline ::roah_rsbb_msgs::Time* RobotBeacon::release_time() {
  // @@protoc_insertion_point(field_release:roah_rsbb_msgs.RobotBeacon.time)
  clear_has_time();
  ::roah_rsbb_msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
inline void RobotBeacon::set_allocated_time(::roah_rsbb_msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:roah_rsbb_msgs.RobotBeacon.time)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace roah_rsbb_msgs

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::roah_rsbb_msgs::RobotBeacon_CompType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::roah_rsbb_msgs::RobotBeacon_CompType>() {
  return ::roah_rsbb_msgs::RobotBeacon_CompType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RobotBeacon_2eproto__INCLUDED
