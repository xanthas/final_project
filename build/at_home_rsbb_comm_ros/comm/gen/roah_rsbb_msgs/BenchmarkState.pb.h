// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BenchmarkState.proto

#ifndef PROTOBUF_BenchmarkState_2eproto__INCLUDED
#define PROTOBUF_BenchmarkState_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Time.pb.h"
// @@protoc_insertion_point(includes)

namespace roah_rsbb_msgs {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_BenchmarkState_2eproto();
void protobuf_AssignDesc_BenchmarkState_2eproto();
void protobuf_ShutdownFile_BenchmarkState_2eproto();

class BenchmarkState;

enum BenchmarkState_CompType {
  BenchmarkState_CompType_COMP_ID = 6666,
  BenchmarkState_CompType_MSG_TYPE = 20
};
bool BenchmarkState_CompType_IsValid(int value);
const BenchmarkState_CompType BenchmarkState_CompType_CompType_MIN = BenchmarkState_CompType_MSG_TYPE;
const BenchmarkState_CompType BenchmarkState_CompType_CompType_MAX = BenchmarkState_CompType_COMP_ID;
const int BenchmarkState_CompType_CompType_ARRAYSIZE = BenchmarkState_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* BenchmarkState_CompType_descriptor();
inline const ::std::string& BenchmarkState_CompType_Name(BenchmarkState_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    BenchmarkState_CompType_descriptor(), value);
}
inline bool BenchmarkState_CompType_Parse(
    const ::std::string& name, BenchmarkState_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BenchmarkState_CompType>(
    BenchmarkState_CompType_descriptor(), name, value);
}
enum BenchmarkState_State {
  BenchmarkState_State_STOP = 0,
  BenchmarkState_State_PREPARE = 1,
  BenchmarkState_State_GOAL_TX = 2,
  BenchmarkState_State_WAITING_RESULT = 3
};
bool BenchmarkState_State_IsValid(int value);
const BenchmarkState_State BenchmarkState_State_State_MIN = BenchmarkState_State_STOP;
const BenchmarkState_State BenchmarkState_State_State_MAX = BenchmarkState_State_WAITING_RESULT;
const int BenchmarkState_State_State_ARRAYSIZE = BenchmarkState_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* BenchmarkState_State_descriptor();
inline const ::std::string& BenchmarkState_State_Name(BenchmarkState_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    BenchmarkState_State_descriptor(), value);
}
inline bool BenchmarkState_State_Parse(
    const ::std::string& name, BenchmarkState_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BenchmarkState_State>(
    BenchmarkState_State_descriptor(), name, value);
}
// ===================================================================

class BenchmarkState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:roah_rsbb_msgs.BenchmarkState) */ {
 public:
  BenchmarkState();
  virtual ~BenchmarkState();

  BenchmarkState(const BenchmarkState& from);

  inline BenchmarkState& operator=(const BenchmarkState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BenchmarkState& default_instance();

  void Swap(BenchmarkState* other);

  // implements Message ----------------------------------------------

  inline BenchmarkState* New() const { return New(NULL); }

  BenchmarkState* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BenchmarkState& from);
  void MergeFrom(const BenchmarkState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BenchmarkState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BenchmarkState_CompType CompType;
  static const CompType COMP_ID =
    BenchmarkState_CompType_COMP_ID;
  static const CompType MSG_TYPE =
    BenchmarkState_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return BenchmarkState_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    BenchmarkState_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    BenchmarkState_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    BenchmarkState_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return BenchmarkState_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return BenchmarkState_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return BenchmarkState_CompType_Parse(name, value);
  }

  typedef BenchmarkState_State State;
  static const State STOP =
    BenchmarkState_State_STOP;
  static const State PREPARE =
    BenchmarkState_State_PREPARE;
  static const State GOAL_TX =
    BenchmarkState_State_GOAL_TX;
  static const State WAITING_RESULT =
    BenchmarkState_State_WAITING_RESULT;
  static inline bool State_IsValid(int value) {
    return BenchmarkState_State_IsValid(value);
  }
  static const State State_MIN =
    BenchmarkState_State_State_MIN;
  static const State State_MAX =
    BenchmarkState_State_State_MAX;
  static const int State_ARRAYSIZE =
    BenchmarkState_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return BenchmarkState_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return BenchmarkState_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return BenchmarkState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string benchmark_type = 1;
  bool has_benchmark_type() const;
  void clear_benchmark_type();
  static const int kBenchmarkTypeFieldNumber = 1;
  const ::std::string& benchmark_type() const;
  void set_benchmark_type(const ::std::string& value);
  void set_benchmark_type(const char* value);
  void set_benchmark_type(const char* value, size_t size);
  ::std::string* mutable_benchmark_type();
  ::std::string* release_benchmark_type();
  void set_allocated_benchmark_type(::std::string* benchmark_type);

  // required .roah_rsbb_msgs.BenchmarkState.State benchmark_state = 2;
  bool has_benchmark_state() const;
  void clear_benchmark_state();
  static const int kBenchmarkStateFieldNumber = 2;
  ::roah_rsbb_msgs::BenchmarkState_State benchmark_state() const;
  void set_benchmark_state(::roah_rsbb_msgs::BenchmarkState_State value);

  // optional .roah_rsbb_msgs.Time acknowledgement = 3;
  bool has_acknowledgement() const;
  void clear_acknowledgement();
  static const int kAcknowledgementFieldNumber = 3;
  const ::roah_rsbb_msgs::Time& acknowledgement() const;
  ::roah_rsbb_msgs::Time* mutable_acknowledgement();
  ::roah_rsbb_msgs::Time* release_acknowledgement();
  void set_allocated_acknowledgement(::roah_rsbb_msgs::Time* acknowledgement);

  // optional double target_pose_x = 10;
  bool has_target_pose_x() const;
  void clear_target_pose_x();
  static const int kTargetPoseXFieldNumber = 10;
  double target_pose_x() const;
  void set_target_pose_x(double value);

  // optional double target_pose_y = 11;
  bool has_target_pose_y() const;
  void clear_target_pose_y();
  static const int kTargetPoseYFieldNumber = 11;
  double target_pose_y() const;
  void set_target_pose_y(double value);

  // optional double target_pose_theta = 12;
  bool has_target_pose_theta() const;
  void clear_target_pose_theta();
  static const int kTargetPoseThetaFieldNumber = 12;
  double target_pose_theta() const;
  void set_target_pose_theta(double value);

  // optional string generic_goal = 13;
  bool has_generic_goal() const;
  void clear_generic_goal();
  static const int kGenericGoalFieldNumber = 13;
  const ::std::string& generic_goal() const;
  void set_generic_goal(const ::std::string& value);
  void set_generic_goal(const char* value);
  void set_generic_goal(const char* value, size_t size);
  ::std::string* mutable_generic_goal();
  ::std::string* release_generic_goal();
  void set_allocated_generic_goal(::std::string* generic_goal);

  // @@protoc_insertion_point(class_scope:roah_rsbb_msgs.BenchmarkState)
 private:
  inline void set_has_benchmark_type();
  inline void clear_has_benchmark_type();
  inline void set_has_benchmark_state();
  inline void clear_has_benchmark_state();
  inline void set_has_acknowledgement();
  inline void clear_has_acknowledgement();
  inline void set_has_target_pose_x();
  inline void clear_has_target_pose_x();
  inline void set_has_target_pose_y();
  inline void clear_has_target_pose_y();
  inline void set_has_target_pose_theta();
  inline void clear_has_target_pose_theta();
  inline void set_has_generic_goal();
  inline void clear_has_generic_goal();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr benchmark_type_;
  ::roah_rsbb_msgs::Time* acknowledgement_;
  double target_pose_x_;
  double target_pose_y_;
  double target_pose_theta_;
  ::google::protobuf::internal::ArenaStringPtr generic_goal_;
  int benchmark_state_;
  friend void  protobuf_AddDesc_BenchmarkState_2eproto();
  friend void protobuf_AssignDesc_BenchmarkState_2eproto();
  friend void protobuf_ShutdownFile_BenchmarkState_2eproto();

  void InitAsDefaultInstance();
  static BenchmarkState* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// BenchmarkState

// required string benchmark_type = 1;
inline bool BenchmarkState::has_benchmark_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BenchmarkState::set_has_benchmark_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BenchmarkState::clear_has_benchmark_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BenchmarkState::clear_benchmark_type() {
  benchmark_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_benchmark_type();
}
inline const ::std::string& BenchmarkState::benchmark_type() const {
  // @@protoc_insertion_point(field_get:roah_rsbb_msgs.BenchmarkState.benchmark_type)
  return benchmark_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BenchmarkState::set_benchmark_type(const ::std::string& value) {
  set_has_benchmark_type();
  benchmark_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roah_rsbb_msgs.BenchmarkState.benchmark_type)
}
inline void BenchmarkState::set_benchmark_type(const char* value) {
  set_has_benchmark_type();
  benchmark_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roah_rsbb_msgs.BenchmarkState.benchmark_type)
}
inline void BenchmarkState::set_benchmark_type(const char* value, size_t size) {
  set_has_benchmark_type();
  benchmark_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roah_rsbb_msgs.BenchmarkState.benchmark_type)
}
inline ::std::string* BenchmarkState::mutable_benchmark_type() {
  set_has_benchmark_type();
  // @@protoc_insertion_point(field_mutable:roah_rsbb_msgs.BenchmarkState.benchmark_type)
  return benchmark_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BenchmarkState::release_benchmark_type() {
  // @@protoc_insertion_point(field_release:roah_rsbb_msgs.BenchmarkState.benchmark_type)
  clear_has_benchmark_type();
  return benchmark_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BenchmarkState::set_allocated_benchmark_type(::std::string* benchmark_type) {
  if (benchmark_type != NULL) {
    set_has_benchmark_type();
  } else {
    clear_has_benchmark_type();
  }
  benchmark_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), benchmark_type);
  // @@protoc_insertion_point(field_set_allocated:roah_rsbb_msgs.BenchmarkState.benchmark_type)
}

// required .roah_rsbb_msgs.BenchmarkState.State benchmark_state = 2;
inline bool BenchmarkState::has_benchmark_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BenchmarkState::set_has_benchmark_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BenchmarkState::clear_has_benchmark_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BenchmarkState::clear_benchmark_state() {
  benchmark_state_ = 0;
  clear_has_benchmark_state();
}
inline ::roah_rsbb_msgs::BenchmarkState_State BenchmarkState::benchmark_state() const {
  // @@protoc_insertion_point(field_get:roah_rsbb_msgs.BenchmarkState.benchmark_state)
  return static_cast< ::roah_rsbb_msgs::BenchmarkState_State >(benchmark_state_);
}
inline void BenchmarkState::set_benchmark_state(::roah_rsbb_msgs::BenchmarkState_State value) {
  assert(::roah_rsbb_msgs::BenchmarkState_State_IsValid(value));
  set_has_benchmark_state();
  benchmark_state_ = value;
  // @@protoc_insertion_point(field_set:roah_rsbb_msgs.BenchmarkState.benchmark_state)
}

// optional .roah_rsbb_msgs.Time acknowledgement = 3;
inline bool BenchmarkState::has_acknowledgement() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BenchmarkState::set_has_acknowledgement() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BenchmarkState::clear_has_acknowledgement() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BenchmarkState::clear_acknowledgement() {
  if (acknowledgement_ != NULL) acknowledgement_->::roah_rsbb_msgs::Time::Clear();
  clear_has_acknowledgement();
}
inline const ::roah_rsbb_msgs::Time& BenchmarkState::acknowledgement() const {
  // @@protoc_insertion_point(field_get:roah_rsbb_msgs.BenchmarkState.acknowledgement)
  return acknowledgement_ != NULL ? *acknowledgement_ : *default_instance_->acknowledgement_;
}
inline ::roah_rsbb_msgs::Time* BenchmarkState::mutable_acknowledgement() {
  set_has_acknowledgement();
  if (acknowledgement_ == NULL) {
    acknowledgement_ = new ::roah_rsbb_msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:roah_rsbb_msgs.BenchmarkState.acknowledgement)
  return acknowledgement_;
}
inline ::roah_rsbb_msgs::Time* BenchmarkState::release_acknowledgement() {
  // @@protoc_insertion_point(field_release:roah_rsbb_msgs.BenchmarkState.acknowledgement)
  clear_has_acknowledgement();
  ::roah_rsbb_msgs::Time* temp = acknowledgement_;
  acknowledgement_ = NULL;
  return temp;
}
inline void BenchmarkState::set_allocated_acknowledgement(::roah_rsbb_msgs::Time* acknowledgement) {
  delete acknowledgement_;
  acknowledgement_ = acknowledgement;
  if (acknowledgement) {
    set_has_acknowledgement();
  } else {
    clear_has_acknowledgement();
  }
  // @@protoc_insertion_point(field_set_allocated:roah_rsbb_msgs.BenchmarkState.acknowledgement)
}

// optional double target_pose_x = 10;
inline bool BenchmarkState::has_target_pose_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BenchmarkState::set_has_target_pose_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BenchmarkState::clear_has_target_pose_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BenchmarkState::clear_target_pose_x() {
  target_pose_x_ = 0;
  clear_has_target_pose_x();
}
inline double BenchmarkState::target_pose_x() const {
  // @@protoc_insertion_point(field_get:roah_rsbb_msgs.BenchmarkState.target_pose_x)
  return target_pose_x_;
}
inline void BenchmarkState::set_target_pose_x(double value) {
  set_has_target_pose_x();
  target_pose_x_ = value;
  // @@protoc_insertion_point(field_set:roah_rsbb_msgs.BenchmarkState.target_pose_x)
}

// optional double target_pose_y = 11;
inline bool BenchmarkState::has_target_pose_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BenchmarkState::set_has_target_pose_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BenchmarkState::clear_has_target_pose_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BenchmarkState::clear_target_pose_y() {
  target_pose_y_ = 0;
  clear_has_target_pose_y();
}
inline double BenchmarkState::target_pose_y() const {
  // @@protoc_insertion_point(field_get:roah_rsbb_msgs.BenchmarkState.target_pose_y)
  return target_pose_y_;
}
inline void BenchmarkState::set_target_pose_y(double value) {
  set_has_target_pose_y();
  target_pose_y_ = value;
  // @@protoc_insertion_point(field_set:roah_rsbb_msgs.BenchmarkState.target_pose_y)
}

// optional double target_pose_theta = 12;
inline bool BenchmarkState::has_target_pose_theta() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BenchmarkState::set_has_target_pose_theta() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BenchmarkState::clear_has_target_pose_theta() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BenchmarkState::clear_target_pose_theta() {
  target_pose_theta_ = 0;
  clear_has_target_pose_theta();
}
inline double BenchmarkState::target_pose_theta() const {
  // @@protoc_insertion_point(field_get:roah_rsbb_msgs.BenchmarkState.target_pose_theta)
  return target_pose_theta_;
}
inline void BenchmarkState::set_target_pose_theta(double value) {
  set_has_target_pose_theta();
  target_pose_theta_ = value;
  // @@protoc_insertion_point(field_set:roah_rsbb_msgs.BenchmarkState.target_pose_theta)
}

// optional string generic_goal = 13;
inline bool BenchmarkState::has_generic_goal() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BenchmarkState::set_has_generic_goal() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BenchmarkState::clear_has_generic_goal() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BenchmarkState::clear_generic_goal() {
  generic_goal_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_generic_goal();
}
inline const ::std::string& BenchmarkState::generic_goal() const {
  // @@protoc_insertion_point(field_get:roah_rsbb_msgs.BenchmarkState.generic_goal)
  return generic_goal_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BenchmarkState::set_generic_goal(const ::std::string& value) {
  set_has_generic_goal();
  generic_goal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roah_rsbb_msgs.BenchmarkState.generic_goal)
}
inline void BenchmarkState::set_generic_goal(const char* value) {
  set_has_generic_goal();
  generic_goal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roah_rsbb_msgs.BenchmarkState.generic_goal)
}
inline void BenchmarkState::set_generic_goal(const char* value, size_t size) {
  set_has_generic_goal();
  generic_goal_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roah_rsbb_msgs.BenchmarkState.generic_goal)
}
inline ::std::string* BenchmarkState::mutable_generic_goal() {
  set_has_generic_goal();
  // @@protoc_insertion_point(field_mutable:roah_rsbb_msgs.BenchmarkState.generic_goal)
  return generic_goal_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BenchmarkState::release_generic_goal() {
  // @@protoc_insertion_point(field_release:roah_rsbb_msgs.BenchmarkState.generic_goal)
  clear_has_generic_goal();
  return generic_goal_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BenchmarkState::set_allocated_generic_goal(::std::string* generic_goal) {
  if (generic_goal != NULL) {
    set_has_generic_goal();
  } else {
    clear_has_generic_goal();
  }
  generic_goal_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generic_goal);
  // @@protoc_insertion_point(field_set_allocated:roah_rsbb_msgs.BenchmarkState.generic_goal)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace roah_rsbb_msgs

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::roah_rsbb_msgs::BenchmarkState_CompType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::roah_rsbb_msgs::BenchmarkState_CompType>() {
  return ::roah_rsbb_msgs::BenchmarkState_CompType_descriptor();
}
template <> struct is_proto_enum< ::roah_rsbb_msgs::BenchmarkState_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::roah_rsbb_msgs::BenchmarkState_State>() {
  return ::roah_rsbb_msgs::BenchmarkState_State_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BenchmarkState_2eproto__INCLUDED
