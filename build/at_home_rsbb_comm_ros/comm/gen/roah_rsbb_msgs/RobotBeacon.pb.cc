// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RobotBeacon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RobotBeacon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace roah_rsbb_msgs {

namespace {

const ::google::protobuf::Descriptor* RobotBeacon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RobotBeacon_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RobotBeacon_CompType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RobotBeacon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_RobotBeacon_2eproto() {
  protobuf_AddDesc_RobotBeacon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RobotBeacon.proto");
  GOOGLE_CHECK(file != NULL);
  RobotBeacon_descriptor_ = file->message_type(0);
  static const int RobotBeacon_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotBeacon, team_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotBeacon, robot_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotBeacon, time_),
  };
  RobotBeacon_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RobotBeacon_descriptor_,
      RobotBeacon::default_instance_,
      RobotBeacon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotBeacon, _has_bits_[0]),
      -1,
      -1,
      sizeof(RobotBeacon),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RobotBeacon, _internal_metadata_),
      -1);
  RobotBeacon_CompType_descriptor_ = RobotBeacon_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RobotBeacon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RobotBeacon_descriptor_, &RobotBeacon::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RobotBeacon_2eproto() {
  delete RobotBeacon::default_instance_;
  delete RobotBeacon_reflection_;
}

void protobuf_AddDesc_RobotBeacon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_RobotBeacon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::roah_rsbb_msgs::protobuf_AddDesc_Time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021RobotBeacon.proto\022\016roah_rsbb_msgs\032\nTim"
    "e.proto\"\200\001\n\013RobotBeacon\022\021\n\tteam_name\030\001 \002"
    "(\t\022\022\n\nrobot_name\030\002 \002(\t\022\"\n\004time\030\003 \002(\0132\024.r"
    "oah_rsbb_msgs.Time\"&\n\010CompType\022\014\n\007COMP_I"
    "D\020\2124\022\014\n\010MSG_TYPE\020\036B-\n\030eu.rockin.roah_rsb"
    "b_msgsB\021RobotBeaconProtos", 225);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RobotBeacon.proto", &protobuf_RegisterTypes);
  RobotBeacon::default_instance_ = new RobotBeacon();
  RobotBeacon::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RobotBeacon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RobotBeacon_2eproto {
  StaticDescriptorInitializer_RobotBeacon_2eproto() {
    protobuf_AddDesc_RobotBeacon_2eproto();
  }
} static_descriptor_initializer_RobotBeacon_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* RobotBeacon_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotBeacon_CompType_descriptor_;
}
bool RobotBeacon_CompType_IsValid(int value) {
  switch(value) {
    case 30:
    case 6666:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RobotBeacon_CompType RobotBeacon::COMP_ID;
const RobotBeacon_CompType RobotBeacon::MSG_TYPE;
const RobotBeacon_CompType RobotBeacon::CompType_MIN;
const RobotBeacon_CompType RobotBeacon::CompType_MAX;
const int RobotBeacon::CompType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotBeacon::kTeamNameFieldNumber;
const int RobotBeacon::kRobotNameFieldNumber;
const int RobotBeacon::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotBeacon::RobotBeacon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roah_rsbb_msgs.RobotBeacon)
}

void RobotBeacon::InitAsDefaultInstance() {
  time_ = const_cast< ::roah_rsbb_msgs::Time*>(&::roah_rsbb_msgs::Time::default_instance());
}

RobotBeacon::RobotBeacon(const RobotBeacon& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roah_rsbb_msgs.RobotBeacon)
}

void RobotBeacon::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RobotBeacon::~RobotBeacon() {
  // @@protoc_insertion_point(destructor:roah_rsbb_msgs.RobotBeacon)
  SharedDtor();
}

void RobotBeacon::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  robot_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete time_;
  }
}

void RobotBeacon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RobotBeacon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RobotBeacon_descriptor_;
}

const RobotBeacon& RobotBeacon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RobotBeacon_2eproto();
  return *default_instance_;
}

RobotBeacon* RobotBeacon::default_instance_ = NULL;

RobotBeacon* RobotBeacon::New(::google::protobuf::Arena* arena) const {
  RobotBeacon* n = new RobotBeacon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RobotBeacon::Clear() {
// @@protoc_insertion_point(message_clear_start:roah_rsbb_msgs.RobotBeacon)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_team_name()) {
      team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_robot_name()) {
      robot_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_time()) {
      if (time_ != NULL) time_->::roah_rsbb_msgs::Time::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RobotBeacon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roah_rsbb_msgs.RobotBeacon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string team_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), this->team_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roah_rsbb_msgs.RobotBeacon.team_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_robot_name;
        break;
      }

      // required string robot_name = 2;
      case 2: {
        if (tag == 18) {
         parse_robot_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_robot_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->robot_name().data(), this->robot_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roah_rsbb_msgs.RobotBeacon.robot_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_time;
        break;
      }

      // required .roah_rsbb_msgs.Time time = 3;
      case 3: {
        if (tag == 26) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roah_rsbb_msgs.RobotBeacon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roah_rsbb_msgs.RobotBeacon)
  return false;
#undef DO_
}

void RobotBeacon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roah_rsbb_msgs.RobotBeacon)
  // required string team_name = 1;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roah_rsbb_msgs.RobotBeacon.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->team_name(), output);
  }

  // required string robot_name = 2;
  if (has_robot_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_name().data(), this->robot_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roah_rsbb_msgs.RobotBeacon.robot_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->robot_name(), output);
  }

  // required .roah_rsbb_msgs.Time time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->time_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roah_rsbb_msgs.RobotBeacon)
}

::google::protobuf::uint8* RobotBeacon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roah_rsbb_msgs.RobotBeacon)
  // required string team_name = 1;
  if (has_team_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), this->team_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roah_rsbb_msgs.RobotBeacon.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->team_name(), target);
  }

  // required string robot_name = 2;
  if (has_robot_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->robot_name().data(), this->robot_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roah_rsbb_msgs.RobotBeacon.robot_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->robot_name(), target);
  }

  // required .roah_rsbb_msgs.Time time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->time_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roah_rsbb_msgs.RobotBeacon)
  return target;
}

int RobotBeacon::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roah_rsbb_msgs.RobotBeacon)
  int total_size = 0;

  if (has_team_name()) {
    // required string team_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_name());
  }

  if (has_robot_name()) {
    // required string robot_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->robot_name());
  }

  if (has_time()) {
    // required .roah_rsbb_msgs.Time time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_);
  }

  return total_size;
}
int RobotBeacon::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roah_rsbb_msgs.RobotBeacon)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string team_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->team_name());

    // required string robot_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->robot_name());

    // required .roah_rsbb_msgs.Time time = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->time_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RobotBeacon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roah_rsbb_msgs.RobotBeacon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RobotBeacon* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotBeacon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roah_rsbb_msgs.RobotBeacon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roah_rsbb_msgs.RobotBeacon)
    MergeFrom(*source);
  }
}

void RobotBeacon::MergeFrom(const RobotBeacon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roah_rsbb_msgs.RobotBeacon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_team_name()) {
      set_has_team_name();
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (from.has_robot_name()) {
      set_has_robot_name();
      robot_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.robot_name_);
    }
    if (from.has_time()) {
      mutable_time()->::roah_rsbb_msgs::Time::MergeFrom(from.time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RobotBeacon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roah_rsbb_msgs.RobotBeacon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotBeacon::CopyFrom(const RobotBeacon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roah_rsbb_msgs.RobotBeacon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotBeacon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_time()) {
    if (!this->time_->IsInitialized()) return false;
  }
  return true;
}

void RobotBeacon::Swap(RobotBeacon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotBeacon::InternalSwap(RobotBeacon* other) {
  team_name_.Swap(&other->team_name_);
  robot_name_.Swap(&other->robot_name_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RobotBeacon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RobotBeacon_descriptor_;
  metadata.reflection = RobotBeacon_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RobotBeacon

// required string team_name = 1;
bool RobotBeacon::has_team_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RobotBeacon::set_has_team_name() {
  _has_bits_[0] |= 0x00000001u;
}
void RobotBeacon::clear_has_team_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void RobotBeacon::clear_team_name() {
  team_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_team_name();
}
 const ::std::string& RobotBeacon::team_name() const {
  // @@protoc_insertion_point(field_get:roah_rsbb_msgs.RobotBeacon.team_name)
  return team_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RobotBeacon::set_team_name(const ::std::string& value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roah_rsbb_msgs.RobotBeacon.team_name)
}
 void RobotBeacon::set_team_name(const char* value) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roah_rsbb_msgs.RobotBeacon.team_name)
}
 void RobotBeacon::set_team_name(const char* value, size_t size) {
  set_has_team_name();
  team_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roah_rsbb_msgs.RobotBeacon.team_name)
}
 ::std::string* RobotBeacon::mutable_team_name() {
  set_has_team_name();
  // @@protoc_insertion_point(field_mutable:roah_rsbb_msgs.RobotBeacon.team_name)
  return team_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RobotBeacon::release_team_name() {
  // @@protoc_insertion_point(field_release:roah_rsbb_msgs.RobotBeacon.team_name)
  clear_has_team_name();
  return team_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RobotBeacon::set_allocated_team_name(::std::string* team_name) {
  if (team_name != NULL) {
    set_has_team_name();
  } else {
    clear_has_team_name();
  }
  team_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), team_name);
  // @@protoc_insertion_point(field_set_allocated:roah_rsbb_msgs.RobotBeacon.team_name)
}

// required string robot_name = 2;
bool RobotBeacon::has_robot_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RobotBeacon::set_has_robot_name() {
  _has_bits_[0] |= 0x00000002u;
}
void RobotBeacon::clear_has_robot_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void RobotBeacon::clear_robot_name() {
  robot_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robot_name();
}
 const ::std::string& RobotBeacon::robot_name() const {
  // @@protoc_insertion_point(field_get:roah_rsbb_msgs.RobotBeacon.robot_name)
  return robot_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RobotBeacon::set_robot_name(const ::std::string& value) {
  set_has_robot_name();
  robot_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roah_rsbb_msgs.RobotBeacon.robot_name)
}
 void RobotBeacon::set_robot_name(const char* value) {
  set_has_robot_name();
  robot_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roah_rsbb_msgs.RobotBeacon.robot_name)
}
 void RobotBeacon::set_robot_name(const char* value, size_t size) {
  set_has_robot_name();
  robot_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roah_rsbb_msgs.RobotBeacon.robot_name)
}
 ::std::string* RobotBeacon::mutable_robot_name() {
  set_has_robot_name();
  // @@protoc_insertion_point(field_mutable:roah_rsbb_msgs.RobotBeacon.robot_name)
  return robot_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RobotBeacon::release_robot_name() {
  // @@protoc_insertion_point(field_release:roah_rsbb_msgs.RobotBeacon.robot_name)
  clear_has_robot_name();
  return robot_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RobotBeacon::set_allocated_robot_name(::std::string* robot_name) {
  if (robot_name != NULL) {
    set_has_robot_name();
  } else {
    clear_has_robot_name();
  }
  robot_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_name);
  // @@protoc_insertion_point(field_set_allocated:roah_rsbb_msgs.RobotBeacon.robot_name)
}

// required .roah_rsbb_msgs.Time time = 3;
bool RobotBeacon::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RobotBeacon::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
void RobotBeacon::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void RobotBeacon::clear_time() {
  if (time_ != NULL) time_->::roah_rsbb_msgs::Time::Clear();
  clear_has_time();
}
const ::roah_rsbb_msgs::Time& RobotBeacon::time() const {
  // @@protoc_insertion_point(field_get:roah_rsbb_msgs.RobotBeacon.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
::roah_rsbb_msgs::Time* RobotBeacon::mutable_time() {
  set_has_time();
  if (time_ == NULL) {
    time_ = new ::roah_rsbb_msgs::Time;
  }
  // @@protoc_insertion_point(field_mutable:roah_rsbb_msgs.RobotBeacon.time)
  return time_;
}
::roah_rsbb_msgs::Time* RobotBeacon::release_time() {
  // @@protoc_insertion_point(field_release:roah_rsbb_msgs.RobotBeacon.time)
  clear_has_time();
  ::roah_rsbb_msgs::Time* temp = time_;
  time_ = NULL;
  return temp;
}
void RobotBeacon::set_allocated_time(::roah_rsbb_msgs::Time* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:roah_rsbb_msgs.RobotBeacon.time)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace roah_rsbb_msgs

// @@protoc_insertion_point(global_scope)
