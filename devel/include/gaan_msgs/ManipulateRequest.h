// Generated by gencpp from file gaan_msgs/ManipulateRequest.msg
// DO NOT EDIT!


#ifndef GAAN_MSGS_MESSAGE_MANIPULATEREQUEST_H
#define GAAN_MSGS_MESSAGE_MANIPULATEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace gaan_msgs
{
template <class ContainerAllocator>
struct ManipulateRequest_
{
  typedef ManipulateRequest_<ContainerAllocator> Type;

  ManipulateRequest_()
    : goal_pose()
    , action()  {
    }
  ManipulateRequest_(const ContainerAllocator& _alloc)
    : goal_pose(_alloc)
    , action(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _goal_pose_type;
  _goal_pose_type goal_pose;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  _action_type action;





  typedef boost::shared_ptr< ::gaan_msgs::ManipulateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gaan_msgs::ManipulateRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ManipulateRequest_

typedef ::gaan_msgs::ManipulateRequest_<std::allocator<void> > ManipulateRequest;

typedef boost::shared_ptr< ::gaan_msgs::ManipulateRequest > ManipulateRequestPtr;
typedef boost::shared_ptr< ::gaan_msgs::ManipulateRequest const> ManipulateRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gaan_msgs::ManipulateRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gaan_msgs::ManipulateRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gaan_msgs::ManipulateRequest_<ContainerAllocator1> & lhs, const ::gaan_msgs::ManipulateRequest_<ContainerAllocator2> & rhs)
{
  return lhs.goal_pose == rhs.goal_pose &&
    lhs.action == rhs.action;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gaan_msgs::ManipulateRequest_<ContainerAllocator1> & lhs, const ::gaan_msgs::ManipulateRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gaan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gaan_msgs::ManipulateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gaan_msgs::ManipulateRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gaan_msgs::ManipulateRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gaan_msgs::ManipulateRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gaan_msgs::ManipulateRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gaan_msgs::ManipulateRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gaan_msgs::ManipulateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee1712dabac970d38934e9af3255e5f6";
  }

  static const char* value(const ::gaan_msgs::ManipulateRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee1712dabac970d3ULL;
  static const uint64_t static_value2 = 0x8934e9af3255e5f6ULL;
};

template<class ContainerAllocator>
struct DataType< ::gaan_msgs::ManipulateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gaan_msgs/ManipulateRequest";
  }

  static const char* value(const ::gaan_msgs::ManipulateRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gaan_msgs::ManipulateRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Pose goal_pose\n"
"# possible action: PICK, PLACE, PRESENT\n"
"string action\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::gaan_msgs::ManipulateRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gaan_msgs::ManipulateRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_pose);
      stream.next(m.action);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManipulateRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gaan_msgs::ManipulateRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gaan_msgs::ManipulateRequest_<ContainerAllocator>& v)
  {
    s << indent << "goal_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_pose);
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAAN_MSGS_MESSAGE_MANIPULATEREQUEST_H
