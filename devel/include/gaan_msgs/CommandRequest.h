// Generated by gencpp from file gaan_msgs/CommandRequest.msg
// DO NOT EDIT!


#ifndef GAAN_MSGS_MESSAGE_COMMANDREQUEST_H
#define GAAN_MSGS_MESSAGE_COMMANDREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gaan_msgs/Argument.h>

namespace gaan_msgs
{
template <class ContainerAllocator>
struct CommandRequest_
{
  typedef CommandRequest_<ContainerAllocator> Type;

  CommandRequest_()
    : action()
    , arguments()
    , time()  {
    }
  CommandRequest_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , arguments(_alloc)
    , time()  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  _action_type action;

   typedef std::vector< ::gaan_msgs::Argument_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::gaan_msgs::Argument_<ContainerAllocator> >::other >  _arguments_type;
  _arguments_type arguments;

   typedef ros::Time _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::gaan_msgs::CommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gaan_msgs::CommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CommandRequest_

typedef ::gaan_msgs::CommandRequest_<std::allocator<void> > CommandRequest;

typedef boost::shared_ptr< ::gaan_msgs::CommandRequest > CommandRequestPtr;
typedef boost::shared_ptr< ::gaan_msgs::CommandRequest const> CommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gaan_msgs::CommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gaan_msgs::CommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gaan_msgs::CommandRequest_<ContainerAllocator1> & lhs, const ::gaan_msgs::CommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.arguments == rhs.arguments &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gaan_msgs::CommandRequest_<ContainerAllocator1> & lhs, const ::gaan_msgs::CommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gaan_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::gaan_msgs::CommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gaan_msgs::CommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gaan_msgs::CommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gaan_msgs::CommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gaan_msgs::CommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gaan_msgs::CommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gaan_msgs::CommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f77b3aefd0b7bf7aa51bb758f0409ab4";
  }

  static const char* value(const ::gaan_msgs::CommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf77b3aefd0b7bf7aULL;
  static const uint64_t static_value2 = 0xa51bb758f0409ab4ULL;
};

template<class ContainerAllocator>
struct DataType< ::gaan_msgs::CommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gaan_msgs/CommandRequest";
  }

  static const char* value(const ::gaan_msgs::CommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gaan_msgs::CommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action\n"
"Argument[] arguments\n"
"time time\n"
"\n"
"================================================================================\n"
"MSG: gaan_msgs/Argument\n"
"string arg_name\n"
"string role_filler\n"
;
  }

  static const char* value(const ::gaan_msgs::CommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gaan_msgs::CommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.arguments);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gaan_msgs::CommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gaan_msgs::CommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
    s << indent << "arguments[]" << std::endl;
    for (size_t i = 0; i < v.arguments.size(); ++i)
    {
      s << indent << "  arguments[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::gaan_msgs::Argument_<ContainerAllocator> >::stream(s, indent + "    ", v.arguments[i]);
    }
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAAN_MSGS_MESSAGE_COMMANDREQUEST_H
