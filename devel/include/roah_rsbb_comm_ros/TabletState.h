// Generated by gencpp from file roah_rsbb_comm_ros/TabletState.msg
// DO NOT EDIT!


#ifndef ROAH_RSBB_COMM_ROS_MESSAGE_TABLETSTATE_H
#define ROAH_RSBB_COMM_ROS_MESSAGE_TABLETSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roah_rsbb_comm_ros
{
template <class ContainerAllocator>
struct TabletState_
{
  typedef TabletState_<ContainerAllocator> Type;

  TabletState_()
    : display_map(false)
    , call_time()
    , position_time()
    , position_x(0.0)
    , position_y(0.0)  {
    }
  TabletState_(const ContainerAllocator& _alloc)
    : display_map(false)
    , call_time()
    , position_time()
    , position_x(0.0)
    , position_y(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _display_map_type;
  _display_map_type display_map;

   typedef ros::Time _call_time_type;
  _call_time_type call_time;

   typedef ros::Time _position_time_type;
  _position_time_type position_time;

   typedef double _position_x_type;
  _position_x_type position_x;

   typedef double _position_y_type;
  _position_y_type position_y;





  typedef boost::shared_ptr< ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator> const> ConstPtr;

}; // struct TabletState_

typedef ::roah_rsbb_comm_ros::TabletState_<std::allocator<void> > TabletState;

typedef boost::shared_ptr< ::roah_rsbb_comm_ros::TabletState > TabletStatePtr;
typedef boost::shared_ptr< ::roah_rsbb_comm_ros::TabletState const> TabletStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator1> & lhs, const ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator2> & rhs)
{
  return lhs.display_map == rhs.display_map &&
    lhs.call_time == rhs.call_time &&
    lhs.position_time == rhs.position_time &&
    lhs.position_x == rhs.position_x &&
    lhs.position_y == rhs.position_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator1> & lhs, const ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roah_rsbb_comm_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e22a07b846b70880201a367bc6f1c8a3";
  }

  static const char* value(const ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe22a07b846b70880ULL;
  static const uint64_t static_value2 = 0x201a367bc6f1c8a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roah_rsbb_comm_ros/TabletState";
  }

  static const char* value(const ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool display_map\n"
"time call_time\n"
"time position_time\n"
"float64 position_x\n"
"float64 position_y\n"
;
  }

  static const char* value(const ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.display_map);
      stream.next(m.call_time);
      stream.next(m.position_time);
      stream.next(m.position_x);
      stream.next(m.position_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TabletState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roah_rsbb_comm_ros::TabletState_<ContainerAllocator>& v)
  {
    s << indent << "display_map: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.display_map);
    s << indent << "call_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.call_time);
    s << indent << "position_time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.position_time);
    s << indent << "position_x: ";
    Printer<double>::stream(s, indent + "  ", v.position_x);
    s << indent << "position_y: ";
    Printer<double>::stream(s, indent + "  ", v.position_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROAH_RSBB_COMM_ROS_MESSAGE_TABLETSTATE_H
