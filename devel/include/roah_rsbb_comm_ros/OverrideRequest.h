// Generated by gencpp from file roah_rsbb_comm_ros/OverrideRequest.msg
// DO NOT EDIT!


#ifndef ROAH_RSBB_COMM_ROS_MESSAGE_OVERRIDEREQUEST_H
#define ROAH_RSBB_COMM_ROS_MESSAGE_OVERRIDEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roah_rsbb_comm_ros
{
template <class ContainerAllocator>
struct OverrideRequest_
{
  typedef OverrideRequest_<ContainerAllocator> Type;

  OverrideRequest_()
    : benchmark_type(0)
    , benchmark_state(0)
    , acknowledgement()
    , initial_state()
    , switches()  {
    }
  OverrideRequest_(const ContainerAllocator& _alloc)
    : benchmark_type(0)
    , benchmark_state(0)
    , acknowledgement()
    , initial_state(_alloc)
    , switches(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _benchmark_type_type;
  _benchmark_type_type benchmark_type;

   typedef uint8_t _benchmark_state_type;
  _benchmark_state_type benchmark_state;

   typedef ros::Time _acknowledgement_type;
  _acknowledgement_type acknowledgement;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _initial_state_type;
  _initial_state_type initial_state;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _switches_type;
  _switches_type switches;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif
#if defined(_WIN32) && defined(PREPARE)
  #undef PREPARE
#endif
#if defined(_WIN32) && defined(GOAL_TX)
  #undef GOAL_TX
#endif
#if defined(_WIN32) && defined(WAITING_RESULT)
  #undef WAITING_RESULT
#endif

  enum {
    STOP = 0u,
    PREPARE = 1u,
    GOAL_TX = 2u,
    WAITING_RESULT = 3u,
  };


  typedef boost::shared_ptr< ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator> const> ConstPtr;

}; // struct OverrideRequest_

typedef ::roah_rsbb_comm_ros::OverrideRequest_<std::allocator<void> > OverrideRequest;

typedef boost::shared_ptr< ::roah_rsbb_comm_ros::OverrideRequest > OverrideRequestPtr;
typedef boost::shared_ptr< ::roah_rsbb_comm_ros::OverrideRequest const> OverrideRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator1> & lhs, const ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator2> & rhs)
{
  return lhs.benchmark_type == rhs.benchmark_type &&
    lhs.benchmark_state == rhs.benchmark_state &&
    lhs.acknowledgement == rhs.acknowledgement &&
    lhs.initial_state == rhs.initial_state &&
    lhs.switches == rhs.switches;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator1> & lhs, const ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roah_rsbb_comm_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "616a9e24da0705b47816f8443dff5147";
  }

  static const char* value(const ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x616a9e24da0705b4ULL;
  static const uint64_t static_value2 = 0x7816f8443dff5147ULL;
};

template<class ContainerAllocator>
struct DataType< ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roah_rsbb_comm_ros/OverrideRequest";
  }

  static const char* value(const ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Use the values defined for benchmark in Benchmark.msg\n"
"# Set for the benchmark you want to test, or NONE to stop testing\n"
"uint8 benchmark_type\n"
"\n"
"uint8 STOP = 0\n"
"uint8 PREPARE = 1\n"
"uint8 GOAL_TX = 2\n"
"uint8 WAITING_RESULT = 3\n"
"uint8 benchmark_state\n"
"\n"
"time acknowledgement\n"
"\n"
"bool[] initial_state\n"
"uint32[] switches\n"
;
  }

  static const char* value(const ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.benchmark_type);
      stream.next(m.benchmark_state);
      stream.next(m.acknowledgement);
      stream.next(m.initial_state);
      stream.next(m.switches);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OverrideRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roah_rsbb_comm_ros::OverrideRequest_<ContainerAllocator>& v)
  {
    s << indent << "benchmark_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.benchmark_type);
    s << indent << "benchmark_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.benchmark_state);
    s << indent << "acknowledgement: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.acknowledgement);
    s << indent << "initial_state[]" << std::endl;
    for (size_t i = 0; i < v.initial_state.size(); ++i)
    {
      s << indent << "  initial_state[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.initial_state[i]);
    }
    s << indent << "switches[]" << std::endl;
    for (size_t i = 0; i < v.switches.size(); ++i)
    {
      s << indent << "  switches[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.switches[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROAH_RSBB_COMM_ROS_MESSAGE_OVERRIDEREQUEST_H
