// Generated by gencpp from file roah_rsbb_comm_ros/BenchmarkState.msg
// DO NOT EDIT!


#ifndef ROAH_RSBB_COMM_ROS_MESSAGE_BENCHMARKSTATE_H
#define ROAH_RSBB_COMM_ROS_MESSAGE_BENCHMARKSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roah_rsbb_comm_ros
{
template <class ContainerAllocator>
struct BenchmarkState_
{
  typedef BenchmarkState_<ContainerAllocator> Type;

  BenchmarkState_()
    : benchmark_state(0)  {
    }
  BenchmarkState_(const ContainerAllocator& _alloc)
    : benchmark_state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _benchmark_state_type;
  _benchmark_state_type benchmark_state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif
#if defined(_WIN32) && defined(PREPARE)
  #undef PREPARE
#endif
#if defined(_WIN32) && defined(EXECUTE)
  #undef EXECUTE
#endif

  enum {
    STOP = 0u,
    PREPARE = 1u,
    EXECUTE = 2u,
  };


  typedef boost::shared_ptr< ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator> const> ConstPtr;

}; // struct BenchmarkState_

typedef ::roah_rsbb_comm_ros::BenchmarkState_<std::allocator<void> > BenchmarkState;

typedef boost::shared_ptr< ::roah_rsbb_comm_ros::BenchmarkState > BenchmarkStatePtr;
typedef boost::shared_ptr< ::roah_rsbb_comm_ros::BenchmarkState const> BenchmarkStateConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator1> & lhs, const ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator2> & rhs)
{
  return lhs.benchmark_state == rhs.benchmark_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator1> & lhs, const ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace roah_rsbb_comm_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "638cf6eefb7a067a4d944ececf176a87";
  }

  static const char* value(const ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x638cf6eefb7a067aULL;
  static const uint64_t static_value2 = 0x4d944ececf176a87ULL;
};

template<class ContainerAllocator>
struct DataType< ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roah_rsbb_comm_ros/BenchmarkState";
  }

  static const char* value(const ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 STOP = 0\n"
"uint8 PREPARE = 1\n"
"uint8 EXECUTE = 2\n"
"uint8 benchmark_state\n"
;
  }

  static const char* value(const ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.benchmark_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BenchmarkState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roah_rsbb_comm_ros::BenchmarkState_<ContainerAllocator>& v)
  {
    s << indent << "benchmark_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.benchmark_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROAH_RSBB_COMM_ROS_MESSAGE_BENCHMARKSTATE_H
