# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roah_rsbb_comm_ros/OverrideRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class OverrideRequest(genpy.Message):
  _md5sum = "616a9e24da0705b47816f8443dff5147"
  _type = "roah_rsbb_comm_ros/OverrideRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Use the values defined for benchmark in Benchmark.msg
# Set for the benchmark you want to test, or NONE to stop testing
uint8 benchmark_type

uint8 STOP = 0
uint8 PREPARE = 1
uint8 GOAL_TX = 2
uint8 WAITING_RESULT = 3
uint8 benchmark_state

time acknowledgement

bool[] initial_state
uint32[] switches
"""
  # Pseudo-constants
  STOP = 0
  PREPARE = 1
  GOAL_TX = 2
  WAITING_RESULT = 3

  __slots__ = ['benchmark_type','benchmark_state','acknowledgement','initial_state','switches']
  _slot_types = ['uint8','uint8','time','bool[]','uint32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       benchmark_type,benchmark_state,acknowledgement,initial_state,switches

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OverrideRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.benchmark_type is None:
        self.benchmark_type = 0
      if self.benchmark_state is None:
        self.benchmark_state = 0
      if self.acknowledgement is None:
        self.acknowledgement = genpy.Time()
      if self.initial_state is None:
        self.initial_state = []
      if self.switches is None:
        self.switches = []
    else:
      self.benchmark_type = 0
      self.benchmark_state = 0
      self.acknowledgement = genpy.Time()
      self.initial_state = []
      self.switches = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B2I().pack(_x.benchmark_type, _x.benchmark_state, _x.acknowledgement.secs, _x.acknowledgement.nsecs))
      length = len(self.initial_state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.initial_state))
      length = len(self.switches)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.Struct(pattern).pack(*self.switches))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.acknowledgement is None:
        self.acknowledgement = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 10
      (_x.benchmark_type, _x.benchmark_state, _x.acknowledgement.secs, _x.acknowledgement.nsecs,) = _get_struct_2B2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.initial_state = s.unpack(str[start:end])
      self.initial_state = list(map(bool, self.initial_state))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.switches = s.unpack(str[start:end])
      self.acknowledgement.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B2I().pack(_x.benchmark_type, _x.benchmark_state, _x.acknowledgement.secs, _x.acknowledgement.nsecs))
      length = len(self.initial_state)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.initial_state.tostring())
      length = len(self.switches)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.switches.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.acknowledgement is None:
        self.acknowledgement = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 10
      (_x.benchmark_type, _x.benchmark_state, _x.acknowledgement.secs, _x.acknowledgement.nsecs,) = _get_struct_2B2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.initial_state = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.initial_state = list(map(bool, self.initial_state))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.switches = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      self.acknowledgement.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2I = None
def _get_struct_2B2I():
    global _struct_2B2I
    if _struct_2B2I is None:
        _struct_2B2I = struct.Struct("<2B2I")
    return _struct_2B2I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roah_rsbb_comm_ros/OverrideResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OverrideResponse(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "roah_rsbb_comm_ros/OverrideResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OverrideResponse, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
class Override(object):
  _type          = 'roah_rsbb_comm_ros/Override'
  _md5sum = '616a9e24da0705b47816f8443dff5147'
  _request_class  = OverrideRequest
  _response_class = OverrideResponse
