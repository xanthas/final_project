# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roah_rsbb_comm_ros/DevicesState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class DevicesState(genpy.Message):
  _md5sum = "c3473010fb060fb5c9e320d2700daeec"
  _type = "roah_rsbb_comm_ros/DevicesState"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time bell
bool switch_1
bool switch_2
bool switch_3
uint8 dimmer
uint8 blinds
bool door_win_detect
"""
  __slots__ = ['bell','switch_1','switch_2','switch_3','dimmer','blinds','door_win_detect']
  _slot_types = ['time','bool','bool','bool','uint8','uint8','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bell,switch_1,switch_2,switch_3,dimmer,blinds,door_win_detect

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DevicesState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.bell is None:
        self.bell = genpy.Time()
      if self.switch_1 is None:
        self.switch_1 = False
      if self.switch_2 is None:
        self.switch_2 = False
      if self.switch_3 is None:
        self.switch_3 = False
      if self.dimmer is None:
        self.dimmer = 0
      if self.blinds is None:
        self.blinds = 0
      if self.door_win_detect is None:
        self.door_win_detect = False
    else:
      self.bell = genpy.Time()
      self.switch_1 = False
      self.switch_2 = False
      self.switch_3 = False
      self.dimmer = 0
      self.blinds = 0
      self.door_win_detect = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I6B().pack(_x.bell.secs, _x.bell.nsecs, _x.switch_1, _x.switch_2, _x.switch_3, _x.dimmer, _x.blinds, _x.door_win_detect))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bell is None:
        self.bell = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.bell.secs, _x.bell.nsecs, _x.switch_1, _x.switch_2, _x.switch_3, _x.dimmer, _x.blinds, _x.door_win_detect,) = _get_struct_2I6B().unpack(str[start:end])
      self.switch_1 = bool(self.switch_1)
      self.switch_2 = bool(self.switch_2)
      self.switch_3 = bool(self.switch_3)
      self.door_win_detect = bool(self.door_win_detect)
      self.bell.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I6B().pack(_x.bell.secs, _x.bell.nsecs, _x.switch_1, _x.switch_2, _x.switch_3, _x.dimmer, _x.blinds, _x.door_win_detect))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.bell is None:
        self.bell = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 14
      (_x.bell.secs, _x.bell.nsecs, _x.switch_1, _x.switch_2, _x.switch_3, _x.dimmer, _x.blinds, _x.door_win_detect,) = _get_struct_2I6B().unpack(str[start:end])
      self.switch_1 = bool(self.switch_1)
      self.switch_2 = bool(self.switch_2)
      self.switch_3 = bool(self.switch_3)
      self.door_win_detect = bool(self.door_win_detect)
      self.bell.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I6B = None
def _get_struct_2I6B():
    global _struct_2I6B
    if _struct_2I6B is None:
        _struct_2I6B = struct.Struct("<2I6B")
    return _struct_2I6B
